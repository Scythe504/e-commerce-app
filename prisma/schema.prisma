// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Purchase {
//   id             String         @id @default(cuid())
//   items_purchase String[]
//   userId         String
//   user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
//   item           Item[]
//   dateOfPurchase DateTime
//   PurchaseItem   PurchaseItem[]

//   @@unique([userId])
// }

// model PurchaseItem {
//   id         String   @id @default(cuid())
//   purchaseId String
//   itemId     String
//   purchase   Purchase @relation(fields: [purchaseId], references: [id])
//   item       Item     @relation(fields: [itemId], references: [id])
// }
// Below lines where in Items Table
// purchase    PurchaseItem[]
// purchaseId  String?
// Purchase    Purchase?      @relation(fields: [purchaseId], references: [id])

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  username              String?
  email                 String?                @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  isTwoFactorEnabled    Boolean                @default(false)
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?
  Cart                  Cart?
  Purchase              Purchase[]
  reviews               Review[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String   @id @default(cuid())
  email   String
  token   String
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires DateTime

  @@unique([userId])
}

model Item {
  id          String     @id @default(cuid())
  title       String
  description String?
  image       String
  price       Float
  cart        Cart[]
  review      Review[]
  purchases   Purchase[]

  @@unique([id])
}

model Purchase {
  id          Int      @id @default(autoincrement())
  items       Item[]
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchasedAt DateTime @default(now())
}

model Cart {
  id        String @id @default(cuid())
  userId    String @unique
  usersCart User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     Item[]
}

model Review {
  id         Int      @id @default(autoincrement())
  itemId     String
  item       Item     @relation(fields: [itemId], references: [id])
  content    String
  rating     Int
  reviewerId String
  reviewer   User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

enum methodSignin {
  GOOGLE
  EMAIL
}
